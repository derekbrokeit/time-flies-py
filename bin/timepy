#!/usr/bin/env python

import sys

import numpy as np
from scipy.stats import gaussian_kde

import matplotlib.pyplot as plt
from matplotlib.pyplot import figure, show

from timeit     import repeat
#from subprocess import call

STMT_QUIET = "call(%r, stdout=PIPE)"
STMT_VERBOSE = "call(%r)"
CLI_SETUP = "from subprocess import call, PIPE"
COLOR = "brgkmy"

def eval_args():
    import argparse
    parser = argparse.ArgumentParser()

    parser.add_argument("-n","--number", help="How many times to execute the statement", type=int)
    parser.add_argument("-r","--repeat", help="How many times to repeat the timer", type=int)
    parser.add_argument("-b","--bins", help="Number of bins in the histogram", type=int)
    parser.add_argument("-d","--data-file", help="Specify the output file for the data")
    parser.add_argument("-f","--fig-file", help="Specify the output file for the figure")
    parser.add_argument("-v","--verbose", help="Print the output of every command to stdout", action="store_true")
    parser.add_argument("--hist", help="Plot the histogram instead of filled curve", action="store_true")
    parser.add_argument("--load", help="Loads the data from a data-file and plots it", action="store_true")

    parser.add_argument("stmt", help="The system statement to run, comparison is done if more than one are provided", nargs="+")

    args = parser.parse_args()

    # reset the sim times
    load = False
    kwargs = {}
    if args.number:
        kwargs["number"] = args.number
    if args.repeat:
        kwargs["repeat"] = args.repeat
    if args.bins:
        kwargs["bins"] = args.bins
    if args.hist:
        kwargs["hist"] = True
    if args.data_file:
        kwargs["outfile"] = args.data_file
    if args.fig_file:
        kwargs["figfile"] = args.fig_file
    if args.verbose:
        kwargs["verbose"] = True
    if args.load:
        load = True

    raw = args.stmt

    return raw, load, kwargs

def gen_call_statement(orig, verbose=False, **kwargs):
    if verbose:
        pattern = STMT_VERBOSE
    else:
        pattern = STMT_QUIET

    stmt = [pattern % s.split(" ") for s in orig]
    return stmt

def run_timer(stmt, setup=None, number=10, repeat=10, outfile="/tmp/timepy-data.txt",**kwargs):
    t = np.zeros((len(stmt),repeat))
    for i, s in enumerate(stmt):
        print "Timing: %s" % raw[i]
        t[i,:] = repeat(stmt=s, setup=setup, number=number)

    # save the data before plotting
    if outfile:
        np.savetxt(outfile, t)

    return t

def cli_timer(raw_stmt, **kwargs):
    stmt = gen_call_statement(raw_stmt, **kwargs)

    return run_timer(stmt, CLI_SETUP, **kwargs)

def load_timer(raw_stmt, **kwargs):
    try:
        outfile = kwargs["outfile"]
    except KeyError:
        outfile = "/tmp/timepy-data.txt"

    t = np.loadtxt(outfile)
    gen_plots(t, raw, **kwargs)

def gen_plots(data, raw, bins=5, number=10, hist=False, figfile="/tmp/timepy-fig.png", **kwargs):
    # convert the total timeit time to time-per-exec
    data /= number

    figure()
    for i,a in enumerate(data):

        if hist:
            # plots a histogram
            n, bin, patches = plt.hist(t[i,:].T, bins=bins, normed=1, histtype='stepfilled', 
                    color=COLOR[i], alpha=0.5)
        else:
            # plot the gaussian line graph
            # find a gausian curve fit for the data
            density = gaussian_kde(a)
            x = np.linspace(0,max(a)+.1,200)
            density.covariance_factor = lambda : .25
            density._compute_covariance()
            y = density(x)
            plt.plot(x, y, COLOR[i], linewidth=2, label=raw[i])
            # fills in the gaussian line-graph
            plt.fill_between(x, 0, y, label=raw[i], color=COLOR[i], alpha=0.5, )

    # print the labels
    plt.legend()
    plt.ylabel("Count")
    plt.xlabel("Time (s)")

    # make sure axis limits are sane
    xlim = plt.xlim()
    ylim = plt.ylim()
    plt.axis([0, xlim[1], 0, ylim[1]])

    # save the figure before showing
    if figfile:
        plt.savefig(figfile)

    show()

if __name__ == "__main__":
    print "timepy"
    raw, load, kwargs = eval_args()
    if load:
        load_timer(raw, **kwargs)
    else:
        t = cli_timer(raw, **kwargs)
    gen_plots(t, raw, **kwargs)
